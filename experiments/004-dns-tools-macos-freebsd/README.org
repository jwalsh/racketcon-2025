* Experiment 004: DNS Tools on macOS and FreeBSD

** Overview

Understanding DNS tools and debugging techniques on macOS and FreeBSD. Essential foundation for understanding Cloudflare's DNS challenges at scale.

** Core DNS Tools

*** 1. dig (Domain Information Groper)

*macOS/FreeBSD*: Pre-installed

#+begin_src bash
# Basic query
dig example.com

# Query specific record type
dig example.com A
dig example.com AAAA
dig example.com MX
dig example.com TXT

# Query specific nameserver
dig @1.1.1.1 example.com

# Short answer only
dig +short example.com

# Trace delegation path
dig +trace example.com

# Reverse DNS lookup
dig -x 1.1.1.1
#+end_src

*** 2. host

*macOS/FreeBSD*: Pre-installed

#+begin_src bash
# Simple lookup
host example.com

# Verbose output
host -v example.com

# Query specific server
host example.com 1.1.1.1

# All records
host -a example.com
#+end_src

*** 3. nslookup (Legacy but still useful)

#+begin_src bash
# Interactive mode
nslookup
> server 1.1.1.1
> set type=A
> example.com

# Non-interactive
nslookup example.com
nslookup example.com 1.1.1.1
#+end_src

*** 4. drill (Modern dig alternative)

*FreeBSD*: ~pkg install ldns~
*macOS*: ~brew install ldns~

#+begin_src bash
# Similar to dig
drill example.com
drill example.com @1.1.1.1

# DNSSEC validation
drill -S example.com

# Trace
drill -T example.com
#+end_src

*** 5. kdig (Knot DNS dig)

*FreeBSD*: ~pkg install knot-utils~
*macOS*: ~brew install knot~

#+begin_src bash
# Enhanced dig
kdig example.com

# Show timing
kdig +stats example.com
#+end_src

** System DNS Configuration

*** macOS

*View current DNS servers*:
#+begin_src bash
scutil --dns
networksetup -getdnsservers Wi-Fi
#+end_src

*Set DNS servers*:
#+begin_src bash
# Using Cloudflare
networksetup -setdnsservers Wi-Fi 1.1.1.1 1.0.0.1

# Using Google
networksetup -setdnsservers Wi-Fi 8.8.8.8 8.8.4.4

# Using DHCP
networksetup -setdnsservers Wi-Fi Empty
#+end_src

*Flush DNS cache*:
#+begin_src bash
sudo dscacheutil -flushcache
sudo killall -HUP mDNSResponder
#+end_src

*View DNS cache* (macOS 10.12+):
#+begin_src bash
sudo killall -INFO mDNSResponder
sudo log collect --last 1m --output dns.logarchive
#+end_src

*** FreeBSD

*Configuration*: ~/etc/resolv.conf~

#+begin_src bash
# View current settings
cat /etc/resolv.conf

# Set DNS (edit file)
nameserver 1.1.1.1
nameserver 1.0.0.1
options edns0
#+end_src

*Using resolvconf* (recommended):
#+begin_src bash
# Edit /etc/resolvconf.conf
name_servers="1.1.1.1 1.0.0.1"

# Regenerate
resolvconf -u
#+end_src

*Local resolver (unbound)*:
#+begin_src bash
pkg install unbound

# Edit /usr/local/etc/unbound/unbound.conf
service unbound enable
service unbound start
#+end_src

** Advanced Tools

*** tcpdump (Packet capture)

*Capture DNS traffic*:
#+begin_src bash
# macOS/FreeBSD
sudo tcpdump -i en0 -n port 53

# Save to file
sudo tcpdump -i en0 -n port 53 -w dns.pcap

# Filter by host
sudo tcpdump -i en0 -n host 1.1.1.1 and port 53
#+end_src

*** wireshark/tshark

*macOS*: ~brew install --cask wireshark~
*FreeBSD*: ~pkg install wireshark~

#+begin_src bash
# CLI version
tshark -i en0 -f "port 53" -Y "dns"

# Display filter
tshark -r dns.pcap -Y "dns.qry.name contains example"
#+end_src

*** dnstop (Real-time DNS traffic)

*FreeBSD*: ~pkg install dnstop~
*macOS*: ~brew install dnstop~

#+begin_src bash
sudo dnstop -l 3 en0
#+end_src

*** dnsperf (Performance testing)

*FreeBSD*: ~pkg install dnsperf~
*macOS*: ~brew install dnsperf~

#+begin_src bash
# Create query file
cat > queries.txt << EOF
example.com A
google.com A
cloudflare.com A
EOF

# Run test
dnsperf -s 1.1.1.1 -d queries.txt
#+end_src

** DNS Server Software

*** BIND 9

*FreeBSD*: ~pkg install bind918~
*macOS*: ~brew install bind~

#+begin_src bash
# Start named
sudo named -c /etc/namedb/named.conf

# Check config
named-checkconf
named-checkzone example.com /etc/namedb/example.com.zone
#+end_src

*** Unbound

*FreeBSD*: ~pkg install unbound~
*macOS*: ~brew install unbound~

#+begin_src bash
# Start
sudo unbound -c /usr/local/etc/unbound/unbound.conf

# Control
unbound-control stats
unbound-control flush example.com
#+end_src

*** Knot DNS

*FreeBSD*: ~pkg install knot3~
*macOS*: ~brew install knot~

#+begin_src bash
# Authoritative server
knotd -c /usr/local/etc/knot/knot.conf
#+end_src

** DNSSEC Tools

*** Validation

#+begin_src bash
# dig with DNSSEC
dig +dnssec example.com

# Validate chain
drill -S -T example.com

# Check DS records
dig DS example.com
#+end_src

*** Key management (FreeBSD/macOS)

#+begin_src bash
# Generate keys
dnssec-keygen -a RSASHA256 -b 2048 -n ZONE example.com

# Sign zone
dnssec-signzone -o example.com example.com.zone
#+end_src

** DNS over HTTPS (DoH)

*** cloudflared

*macOS/FreeBSD*:
#+begin_src bash
# macOS
brew install cloudflared

# FreeBSD
pkg install cloudflared

# Run DoH proxy
cloudflared proxy-dns --upstream https://1.1.1.1/dns-query
#+end_src

*** dnscrypt-proxy

#+begin_src bash
# macOS
brew install dnscrypt-proxy

# FreeBSD
pkg install dnscrypt-proxy2

# Configure
sudo dnscrypt-proxy -config /usr/local/etc/dnscrypt-proxy.toml
#+end_src

** Testing Scenarios

*** 1. Query Response Time

#+begin_src bash
dig @1.1.1.1 example.com | grep "Query time"

# Compare resolvers
for server in 1.1.1.1 8.8.8.8 208.67.222.222; do
    echo "Testing $server"
    dig @$server example.com | grep "Query time"
done
#+end_src

*** 2. Anycast Testing

#+begin_src bash
# Which Cloudflare PoP?
dig @1.1.1.1 CH TXT whoami.cloudflare

# Traceroute to DNS server
traceroute 1.1.1.1
#+end_src

*** 3. DNS Load Testing

#+begin_src bash
# Using dnsperf
dnsperf -s 127.0.0.1 -d queries.txt -c 10 -l 30

# Using queryperf (BIND)
queryperf -d queries.txt -s 1.1.1.1
#+end_src

** macOS Specific

*** mDNSResponder Logs

#+begin_src bash
# Enable debug logging
sudo log config --mode "level:debug" --subsystem com.apple.mDNSResponder

# Watch logs
log stream --predicate 'subsystem == "com.apple.mDNSResponder"' --level debug
#+end_src

*** Network Extensions

#+begin_src bash
# List DNS settings per interface
scutil --dns

# Show network services
networksetup -listallnetworkservices
#+end_src

** FreeBSD Specific

*** Jail DNS Configuration

#+begin_src bash
# Set DNS for jail
jexec myjail cat /etc/resolv.conf

# Override in jail.conf
exec.start = "sh /etc/rc; echo 'nameserver 1.1.1.1' > /etc/resolv.conf";
#+end_src

*** pf + DNS

#+begin_src bash
# Allow DNS in pf.conf
pass out proto udp to any port 53
pass out proto tcp to any port 53

# Log DNS queries
pass log out proto udp to any port 53
#+end_src

** Resources

*** Documentation
- [[https://www.isc.org/bind/][ISC BIND]]
- [[https://nlnetlabs.nl/documentation/unbound/][Unbound Documentation]]
- [[https://developers.cloudflare.com/dns/][Cloudflare DNS Docs]]

*** RFCs
- RFC 1035: Domain Names - Implementation and Specification
- RFC 4034: DNSSEC Resource Records
- RFC 8484: DNS over HTTPS (DoH)

*** Tools
- [[https://dnsviz.net/][DNSViz]] - DNS visualization
- [[https://dnsspy.io/][DNS Spy]] - DNS propagation checker
- [[https://intodns.com/][IntoDNS]] - DNS health check
