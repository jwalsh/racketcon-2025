#+TITLE: RacketCon 2025 Sessions
#+AUTHOR: Jason Walsh
#+DATE: October 4-5, 2025
#+STARTUP: overview

[[https://con.racket-lang.org/][RacketCon 2025]] • Boston, MA

* Saturday, October 4th

** 8:30am EDT
Doors Open • Light breakfast served

** DONE [#B] 9:00am EDT Keynote: How Cloudflare Uses Racket and Rosette to Verify DNS Changes
James Larisch & Suleman Ahmad

Since 2022, Cloudflare has used Racket and Rosette to prevent DNS-related bugs. Cloudflare engineers express desired DNS behavior as small programs called policies, written in a custom DSL called topaz-lang. Topaz-lang policies are executed in real-time on Cloudflare's global edge network in response to live DNS queries. But before deployment, all policies are checked for bugs using a verifier we wrote in Rosette, a solver-aided Racket #lang.

*Links*: [[https://docs.racket-lang.org/rosette-guide/][Rosette]] • [[https://blog.cloudflare.com/topaz-policy-engine-design/][Topaz Design]] • [[https://research.cloudflare.com/][Cloudflare Research]]

*Experiments*: [[file:experiments/000-racket-setup/][000]] [[file:experiments/001-rosette-fundamentals/][001]] [[file:experiments/006-topaz-lang-exploration/][006]] [[file:experiments/008-rosette-string-limitations/][008]]

** 10:00am EDT Coffee Break

** DONE [#C] 10:15am EDT Compositional Object Oriented Prototypes
François-René Rideau (Faré)

We reconstruct a theory of object-orientation from first principles, as modularity and extensibility together. Mixin inheritance then appears as a natural embodiment of these joined principles expressed in the lambda-calculus. Further OO concepts such as prototypes, classes, single or multiple inheritance, multiple dispatch, method combinations and more naturally follow. Interestingly, many misconceptions about OO can also be dispelled, and we find that the simplest and most natural context for OO is pure lazy dynamic functional programming, without classes, and even without objects(!).

*Links*: [[https://cons.io/][Gerbil Scheme]] • [[https://common-lisp.net/project/asdf/][ASDF]] • [[https://fare.livejournal.com/][Blog]]

*Experiments*: [[file:experiments/007-compositional-oop/][007]]

** DONE [#A] 10:45am EDT A Match-Like DSL for Deep Immutable Updates
Mike Delmonaco

~match~ is very convenient for deconstructing data and accessing values deep within a data structure, but it is not useful for making changes to that data structure. In this talk, I'll present a DSL that looks like ~match~, but allows you to perform immutable updates on the target value using pattern variables to specify where an update should occur. I'll also talk about optics, which are the abstraction powering these immutable updates.

*Bio*: Software Engineer at Amazon Web Services with hobby interest in Programming Languages and Racket. Enjoys rock climbing, video games, creating interactive math visualizations, programming language research, and teaching.

*Experiments*: [[file:experiments/041-deep-immutable-updates/][041]] [[file:experiments/043-lens-based-updates/][043]] [[file:experiments/045-functional-lenses/][045]]

** 11:45am EDT Lunch (Provided)

** [#C] 1:30pm EDT Ion Fusion
Todd Jonker

Ion Fusion is a customizable programming language that unifies the semantics of persistent data and the code that manipulates it. Oriented around the Amazon Ion data format--the backbone of Amazon's retail systems and even consumer products--Fusion has been the brains of internal analytics, data processing, and workflow systems since 2013. This talk explores Ion Fusion's unique design goals and constraints, its roots in Scheme and Racket, and its vision of sustainable software evolution.

*Links*: [[https://amazon-ion.github.io/ion-docs/][Amazon Ion]] • [[https://github.com/amazon-ion][GitHub]]

*Experiments*: [[file:experiments/061-ion-format-basics/][061]] [[file:experiments/072-custom-lang-implementation/][072]]

** [#A] 2:00pm EDT 'It Works': More Adventures with Racket and Emacs
Greg Hendershott

Evolution of the Emacs "racket-mode" package.

*Links*: [[https://github.com/greghendershott/racket-mode][racket-mode]]

*Experiments*: [[file:experiments/076-racket-mode-basics/][076]]

** [#A] 2:30pm EDT Roulette for Racketeers
Cameron Moy

Discusses a new discrete probabilistic programming language.

*Experiments*: [[file:experiments/086-discrete-probability/][086]] [[file:experiments/088-markov-chains/][088]]

** 3:00pm EDT Break

** [#C] 3:30pm EDT miniDusa: An Extensible Finite-Choice Logic Programming Language
Ari Prakash & Zachary Eisbach

*Experiments*: [[file:experiments/096-datalog-basics/][096]] [[file:experiments/100-relational-programming/][100]]

** [#C] 4:00pm EDT Browsing (and serving) the Slow Internet with Racket
Jonathan Simpson

*Experiments*: [[file:experiments/111-gopher-protocol/][111]] [[file:experiments/118-gemini-protocol/][118]]

** [#C] 4:30pm EDT PROG Rock: Listening to old Lisp code
Asher Olsen

*Experiments*: [[file:experiments/126-music-theory/][126]] [[file:experiments/132-ast-sonification/][132]]

** [#C] 6:00pm EDT
Evening Social • Lord Hobo Brewery

* Sunday, October 5th

** 8:30am EDT
Doors Open • Breakfast not served (eat before coming)

** INPROGRESS [#A] 9:00am EDT Advanced Macrology: 5 Macro Programming Patterns You (No Longer) Need to Know
Michael Ballantyne

Racket's macros make creating small extensions to the language remarkably simple. But when you step up to creating DSLs with static semantics and compiler optimizations, you need new tools to integrate your DSL implementation with Racket's expansion process. In this talk I'll demonstrate 5 macro design patterns that sophisticated DSLs like match, syntax-parse, and Typed Racket use to validate syntax, communicate static information, and integrate with DrRacket. But as any good language-oriented programmer knows, a design pattern usually indicates a missing linguistic abstraction! And in fact, my syntax-spec metalanguage abstracts over all of these design patterns, generating implementations from a declarative specification of your DSL syntax. So I'll also show how you can more easily achieve the same results with syntax-spec, design-pattern-free.

*Bio*: Michael Ballantyne recently completed his Ph.D. at Northeastern University, advised by Matthias Felleisen. His research works towards a future where mainstream programmers regularly create, extend, and fluidly intermix domain-specific languages, with excellent support from their programming language and environment.

*Links*:
- [[https://github.com/michaelballantyne][GitHub: @michaelballantyne]]
- [[http://mballantyne.net][Personal Website]]
- [[https://github.com/michaelballantyne/syntax-spec][syntax-spec]] - Metalanguage for creating DSLs
- [[https://github.com/michaelballantyne/faster-minikanren][faster-minikanren]] - Fast miniKanren implementation
- [[https://nuprl.khoury.northeastern.edu/][NUPRL Research Group]]

*Related Projects*:
- ~syntax-spec~ - Declarative DSL specification
- ~faster-minikanren~ - Optimized logic programming
- ~meta-minikanren~ - Relational miniKanren interpreter

*Experiments*: [[file:experiments/141-macro-patterns/][141]] [[file:experiments/142-syntax-spec-basics/][142]]

*Video*: https://boxcast.tv/view-embed/xtihxdvdmgttkttsp2gj (Day 2 stream)

*Transcription*: See [[file:../TRANSCRIPTION.org][TRANSCRIPTION.org]] for how to transcribe this talk

*Links*: [[https://docs.racket-lang.org/syntax-spec/][syntax-spec]] • [[https://www.ccs.neu.edu/home/mballantyne/][Homepage]]

*Experiments*: [[file:experiments/046-pattern-matching/][046]] [[file:experiments/142-advanced-macros/][142]]

** [#B] 9:30am EDT Great Composers Steal: Obbligato Reuse of Racket in Tonart
Jared Gentner

Imagine, for a moment, that a music score could somehow become a Racket module. Imagine if every notation on that music score was a syntax object. Imagine selecting areas of the score and running macro-like rewrites on the notations within that selection. Imagine a context system which allows a composer to summon important static information about any notation, such as the key, the tuning system, or the instrument. This is the vision of Tonart, an extensible language and library for composing music in Racket. This talk will highlight the ideas Tonart steals from Racket in its design, as well as the language features Tonart reuses from Racket in its implementation.

*Bio*: Jared has been composing music and functions since a young age. A native of Upstate New York, he moved to Boston to study computing at Northeastern. He had no clue about Racket when he enrolled, but where fate leads, we are bound to follow! What he enjoys most is making music with his friends. Jared believes in living life to the fullest, that "Life imitates Art", and that the greatest art is to be found at home.

*Links*: [[https://github.com/tonart][Tonart]] (assumed)

*Experiments*: [[file:experiments/126-music-theory/][126]] [[file:experiments/147-tonart-music-lang/][147]]

** [#A] 10:00am EDT Rhombus Update
Matthew Flatt

Rhombus is ready for early adopters. There's still plenty to be done in creating Rhombus-style bindings for Racket libraries, building entirely new Rhombus libraries when that makes sense, and refining the Rhombus tooling and ecosystem. No language is ever finished, but Rhombus is well past the prototype stage and increasingly a language that you can use for everyday tasks. The talk will present a status report and some guesses about what will happen next.

*Links*: [[https://docs.racket-lang.org/rhombus/][Rhombus Docs]] • [[https://github.com/racket/rhombus][GitHub]]

*Experiments*: [[file:experiments/152-rhombus-intro/][152]]

** 10:30am EDT Break

** [#A] 11:00am EDT The State of Racket
Sam Tobin-Hochstadt

** [#A] 11:30am EDT Racket Town Hall
Racket Management

Please come with your big questions and discussion topics.

* Tags                                                             :noexport:

- racket
- racketcon
- programming-languages
- functional-programming
- lisp
- scheme
